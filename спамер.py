from pyrogram import Client
import asyncio
import os
from dotenv import load_dotenv
import re


SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))


load_dotenv()


api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')


app = Client(
    "my_account",
    api_id=api_id,
    api_hash=api_hash,
    workdir=SCRIPT_DIR
)

async def process_chat_link(chat_link):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–æ–≤
    """
    try:

        chat_link = chat_link.strip()


        if '+' in chat_link:
            return {'type': 'invite', 'link': chat_link}


        if 'web.telegram.org' in chat_link:
            match = re.search(r'#(-?\d+)', chat_link)
            if match:
                chat_id = int(match.group(1))
                return {'type': 'id', 'id': chat_id}
        

        elif 't.me/' in chat_link:
            username = chat_link.split('t.me/')[-1]
            if username.startswith('+'):
                return {'type': 'invite', 'link': chat_link}
            return {'type': 'username', 'username': username}
        

        elif chat_link.replace('-', '').isdigit():
            chat_id = int(chat_link)
            return {'type': 'id', 'id': chat_id}
        

        elif chat_link.startswith('@'):
            return {'type': 'username', 'username': chat_link[1:]}
        

        return {'type': 'raw', 'text': chat_link}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ {chat_link}: {str(e)}")
        return None

async def join_and_get_chat(chat_data):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"""
    try:
        if chat_data['type'] == 'invite':

            try:

                chat = await app.join_chat(chat_data['link'])
                await asyncio.sleep(2)  
                return chat.id
            except Exception as e:
                print(f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)}")

                try:

                    chat = await app.get_chat(chat_data['link'])
                    return chat.id
                except Exception as e2:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e2)}")
                    try:

                        async for dialog in app.get_dialogs():
                            if dialog.chat.invite_link == chat_data['link']:
                                return dialog.chat.id
                    except Exception as e3:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –≤ –¥–∏–∞–ª–æ–≥–∞—Ö: {str(e3)}")
                    return None

        elif chat_data['type'] == 'username':

            try:

                chat = await app.get_chat(chat_data['username'])
                return chat.id
            except Exception:
                try:

                    chat = await app.join_chat(chat_data['username'])
                    await asyncio.sleep(2)
                    return chat.id
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —á–∞—Ç–æ–º –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É: {str(e)}")
                    return None

        elif chat_data['type'] == 'id':

            try:
                chat = await app.get_chat(chat_data['id'])
                return chat.id
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ –ø–æ ID: {str(e)}")

                try:
                    async for dialog in app.get_dialogs():
                        if dialog.chat.id == chat_data['id']:
                            return dialog.chat.id
                except Exception as e2:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –≤ –¥–∏–∞–ª–æ–≥–∞—Ö: {str(e2)}")
                return None

        elif chat_data['type'] == 'raw':

            for attempt in [
                lambda: app.get_chat(chat_data['text']),
                lambda: app.join_chat(chat_data['text'])
            ]:
                try:
                    chat = await attempt()
                    return chat.id
                except Exception:
                    continue
            

            try:
                async for dialog in app.get_dialogs():
                    if str(dialog.chat.id) == chat_data['text']:
                        return dialog.chat.id
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –≤ –¥–∏–∞–ª–æ–≥–∞—Ö: {str(e)}")
            
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É: {chat_data['text']}")
            return None

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞: {str(e)}")
        return None

async def send_messages():

    chats_file = os.path.join(SCRIPT_DIR, 'chats.txt')
    messages_file = os.path.join(SCRIPT_DIR, 'messages.txt')
    

    if not os.path.exists(chats_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {chats_file}")
        return
        
    if not os.path.exists(messages_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {messages_file}")
        return


    with open(chats_file, 'r', encoding='utf-8') as f:
        chats = [line.strip() for line in f if line.strip()]
    

    with open(messages_file, 'r', encoding='utf-8') as f:
        content = f.read().strip()

        messages = [msg.strip() for msg in content.split('===') if msg.strip()]
    
    if not chats:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤!")
        return
    
    if not messages:
        print("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
        return

    print(f"üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ –∏ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    while True:
        for chat_link in chats:
            print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç: {chat_link}")
            

            chat_data = await process_chat_link(chat_link)
            if not chat_data:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É: {chat_link}")
                continue
            
            print(f"üì® –¢–∏–ø —á–∞—Ç–∞: {chat_data['type']}")
            

            chat_id = await join_and_get_chat(chat_data)
            if not chat_id:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É: {chat_link}")
                continue

            try:

                chat_info = await app.get_chat(chat_id)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —á–∞—Ç—É: {chat_info.title} (—Ç–∏–ø: {chat_info.type})")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ: {str(e)}")
            

            for message in messages:
                try:

                    await app.send_message(chat_id, message)
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_link}")

                    preview = message.replace('\n', ' ')[:50] + ('...' if len(message) > 50 else '')
                    print(f"üì® –ü—Ä–µ–≤—å—é: {preview}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
                

                print("‚è≥ –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(15)
            

            print("‚è≥ –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —á–∞—Ç–æ–º...")
            await asyncio.sleep(15)

async def main():
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–º–µ—Ä...")
        await app.start()
        me = await app.get_me()
        print(f"‚úÖ –í–æ—à–ª–∏ –∫–∞–∫: {me.first_name} (@{me.username})")
        await send_messages()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await app.stop()

if __name__ == '__main__':
    app.run(main())

